// Copyright Â© 2018 Nathan Owsiany <nowsiany@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/spf13/cobra"
)

var baseConfigPath = "$HOME/.til.yaml"
var defaultNotesDir = "$HOME/til/notes/"

// initCmd represents the init command
var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Init sets up required initial TIL config",
	Long:  `Use init when first installing TIL. It is used for application configuration.`,
	Run:   initialize,
}

func init() {
	rootCmd.AddCommand(initCmd)
}

func initialize(cmd *cobra.Command, args []string) {
	configFile := strings.Replace(baseConfigPath, "$HOME", homeDir(), 1)

	if _, err := os.Stat(configFile); os.IsNotExist(err) {
		configFileContents := baseConfigFile
		configFileContents = getNotesDir(configFileContents)
		fmt.Println("--------------------------------------------------")
		configFileContents = getDefaultEditor(configFileContents)
		fmt.Println("--------------------------------------------------")

		f, err := os.Create(configFile)
		if err != nil {
			er("Unable to create config file")
		}
		defer f.Close()

		f.Write([]byte(configFileContents))

		fmt.Println(`TIL ready to use!

Config file created at $HOME/.til.yaml

Run the help command for usage instructions:
$ til -h`)
	} else {
		er("Config file already exists.", "Modify if necessary at "+configFile)
	}
}

func getNotesDir(config string) string {
	var notesDir string

	reader := bufio.NewReader(os.Stdin)
	fmt.Print("Where do you want TIL to save your notes (enter for default: $HOME/til/notes/): ")
	inputDir, _ := reader.ReadString('\n')
	inputDir = strings.TrimSuffix(inputDir, "\n")

	if inputDir == "" {
		notesDir = defaultNotesDir
	} else {
		notesDir = inputDir
	}

	if lastChar := notesDir[len(notesDir)-1:]; lastChar != "/" {
		notesDir = notesDir + "/"
	}

	return strings.Replace(config, "{{notesDirectory}}", notesDir, 1)
}

func getDefaultEditor(config string) string {
	var editor string

	reader := bufio.NewReader(os.Stdin)
	defaultEditor := os.Getenv("EDITOR")

	var msg string

	if defaultEditor == "" {
		msg = fmt.Sprint(`What editor do you want to edit your markdown formatted notes ()

Note: this editor must be already available via your terminal.

Enter editor command: `)

	} else {
		msg = fmt.Sprintf(`What editor do you want to edit your markdown formatted notes ()

Note: this editor must be already available via your terminal.

Enter editor command (enter for default: %s): `, defaultEditor)
	}

	fmt.Print(msg)
	inputEditor, _ := reader.ReadString('\n')
	inputEditor = strings.TrimSuffix(inputEditor, "\n")

	if inputEditor == "" && defaultEditor == "" {
		er("Note editor is required")
	} else if inputEditor == "" {
		editor = defaultEditor
	} else {
		editor = inputEditor
	}

	return strings.Replace(config, "{{noteEditor}}", editor, 1)
}

var baseConfigFile = `# auto-generated by - $ til init
notesDirectory: {{notesDirectory}}
noteEditor: {{noteEditor}}
openNotesOnCreate: true
`
